--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[3] = table.create(256)
export type Items = ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two")
export type ItemData = { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } }
export type PlayerData = { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }
export type EntityData = {  }
local function ReadEVENT_PlayerDataReplication(): ({ Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value = {} :: any
	if buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Coins = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.Inventory = table.create(Length)
			-- Read BLOCK: 11 bytes
		local ARRAY_START_2 = Read(11 * Length)
		for Index = 1, Length do
			local Item_2 = {} :: any
			Item_2.Name = true :: any
			-- Read 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			local Index = buffer.readu8(RecieveBuffer, OPERATION_OFFSET_0)
			if Index == 0 then
				Item_2.Name = "Wooden Rod"
			elseif Index == 1 then
				Item_2.Name = "Plastic Rod"
			elseif Index == 2 then
				Item_2.Name = "Fish Test One"
			elseif Index == 3 then
				Item_2.Name = "Fish Test Two"
			else
				error(`Unexpected enum: {Index}`)
			end
			-- Read 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			Item_2.Count = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_1)
			Item_2.Data = {} :: any
			-- Read 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			Item_2.Data.UniqueId = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_2)
			-- Read 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_3) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Item_2.Data.Level = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			end
			-- Read 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_4) == 1 then
				-- Read BLOCK: 4 bytes
				local BLOCK_START = Read(4)
				Item_2.Data.XP = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
			end
			table.insert(Value.Inventory, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.Gamepasses = table.create(Length)
			-- Read BLOCK: 4 bytes
		local ARRAY_START_2 = Read(4 * Length)
		for Index = 1, Length do
			-- Read 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			local Item_2 = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_0)
			table.insert(Value.Gamepasses, Item_2)
		end
		-- END ARRAY
	end
	return Value
end

local function WriteFUNCTION_DATA_FetchPlayerData(Value: nil, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
end

local function ReadFUNCTION_RETURN_FetchPlayerData(): ({ Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? })
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value = {} :: any
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Coins = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.Inventory = table.create(Length)
			-- Read BLOCK: 11 bytes
		local ARRAY_START_2 = Read(11 * Length)
		for Index = 1, Length do
			local Item_2 = {} :: any
			Item_2.Name = true :: any
			-- Read 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			local Index = buffer.readu8(RecieveBuffer, OPERATION_OFFSET_0)
			if Index == 0 then
				Item_2.Name = "Wooden Rod"
			elseif Index == 1 then
				Item_2.Name = "Plastic Rod"
			elseif Index == 2 then
				Item_2.Name = "Fish Test One"
			elseif Index == 3 then
				Item_2.Name = "Fish Test Two"
			else
				error(`Unexpected enum: {Index}`)
			end
			-- Read 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			Item_2.Count = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_1)
			Item_2.Data = {} :: any
			-- Read 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			Item_2.Data.UniqueId = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_2)
			-- Read 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_3) == 1 then
				-- Read BLOCK: 2 bytes
				local BLOCK_START = Read(2)
				Item_2.Data.Level = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
			end
			-- Read 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			if buffer.readu8(RecieveBuffer, OPERATION_OFFSET_4) == 1 then
				-- Read BLOCK: 4 bytes
				local BLOCK_START = Read(4)
				Item_2.Data.XP = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
			end
			table.insert(Value.Inventory, Item_2)
		end
		-- END ARRAY
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.Gamepasses = table.create(Length)
			-- Read BLOCK: 4 bytes
		local ARRAY_START_2 = Read(4 * Length)
		for Index = 1, Length do
			-- Read 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			local Item_2 = buffer.readu32(RecieveBuffer, OPERATION_OFFSET_0)
			table.insert(Value.Gamepasses, Item_2)
		end
		-- END ARRAY
	end
	return Value
end

local function ReadEVENT_EntityAction(): ({ Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value = {} :: any
	Value.Action = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value.Action = "Create"
	elseif Index == 1 then
		Value.Action = "Destroy"
	elseif Index == 2 then
		Value.Action = "Update"
	else
		error(`Unexpected enum: {Index}`)
	end
	Value.EntityId = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		Value.EntityData = {} :: any
	end
	return Value
end

local function WriteFUNCTION_DATA_FetchEntities(Value: nil, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
end

local function ReadFUNCTION_RETURN_FetchEntities(): ({[number]: {  }})
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(1)
		local Key_1 = buffer.readu8(RecieveBuffer, OFFSET_0)
		local Element_1 = {} :: any
		Value[Key_1] = Element_1
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	PlayerDataReplication = {
		On = NOOP
	},
	FetchPlayerData = {
		Invoke = NOOP
	},
	EntityAction = {
		On = NOOP
	},
	FetchEntities = {
		Invoke = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? } = ReadEVENT_PlayerDataReplication()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"PlayerDataReplication\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return ReadFUNCTION_RETURN_FetchPlayerData()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		elseif Index == 2 then
			local Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? } = ReadEVENT_EntityAction()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"EntityAction\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 3 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return ReadFUNCTION_RETURN_FetchEntities()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	PlayerDataReplication = {
		On = function(Listener: (Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				if Events.Reliable[0] == Listener then
					Events.Reliable[0] = nil
				end
			end
		end
	},
	FetchPlayerData = {
		Invoke = function(Value: nil): ({ Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? })
			local InvocationIdentifier = Invoke()
			if Calls[InvocationIdentifier] ~= nil then
				Invocations -= 1
				error("More than 256 calls are awaiting a response, this packet has been dropped.")
			end
			WriteFUNCTION_DATA_FetchPlayerData(Value, InvocationIdentifier)
			Calls[InvocationIdentifier] = coroutine.running()
			local Success, ReturnValue: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? } = coroutine.yield()
			if Success ~= true then
				error("There was an exception while processing \"FetchPlayerData\".")
			end
			return ReturnValue
		end
	},
	EntityAction = {
		On = function(Listener: (Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				if Events.Reliable[2] == Listener then
					Events.Reliable[2] = nil
				end
			end
		end
	},
	FetchEntities = {
		Invoke = function(Value: nil): ({[number]: {  }})
			local InvocationIdentifier = Invoke()
			if Calls[InvocationIdentifier] ~= nil then
				Invocations -= 1
				error("More than 256 calls are awaiting a response, this packet has been dropped.")
			end
			WriteFUNCTION_DATA_FetchEntities(Value, InvocationIdentifier)
			Calls[InvocationIdentifier] = coroutine.running()
			local Success, ReturnValue: {[number]: {  }} = coroutine.yield()
			if Success ~= true then
				error("There was an exception while processing \"FetchEntities\".")
			end
			return ReturnValue
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL