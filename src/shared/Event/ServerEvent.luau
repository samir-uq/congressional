--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.18.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[1] = table.create(256)
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
Queue.Reliable[6] = table.create(256)
Queue.Reliable[7] = table.create(256)
Queue.Reliable[8] = table.create(256)
export type Items = ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two")
export type ItemData = { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } }
export type PlayerData = { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }
export type EntityData = {  }
export type Bill = { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string }
export type Amendment = { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string }
export type Member = { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string }
export type UGT = { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }
export type SimBillCore = { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }
export type SimBill = { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }
export type SimPassData = { Passed: boolean, Votes: {[string]: boolean} }
export type InteractionRes = { Result: string, Success: boolean }
local function WriteEVENT_PlayerDataReplication(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value.Coins ~= nil and 1 or 0)
	if Value.Coins ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writeu32(SendBuffer, BLOCK_START + 0, Value.Coins)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.Inventory ~= nil and 1 or 0)
	if Value.Inventory ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Inventory)
			-- Allocate BLOCK: 11 bytes
		local ARRAY_START_2 = Allocate(11 * #Value.Inventory)
		for Index = 1, #Value.Inventory do
			local Item_2 = Value.Inventory[Index]
			-- Allocate 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			if Item_2.Name == "Wooden Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 0)
			elseif Item_2.Name == "Plastic Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 1)
			elseif Item_2.Name == "Fish Test One" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 2)
			elseif Item_2.Name == "Fish Test Two" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 3)
			else
				error(`Unexpected enum: {Item_2.Name}, expected one of "Wooden Rod" or "Plastic Rod" or "Fish Test One" or "Fish Test Two".`)
			end
			-- Allocate 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_1, Item_2.Count)
			-- Allocate 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_2, Item_2.Data.UniqueId)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.Data.Level ~= nil and 1 or 0)
			if Item_2.Data.Level ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Item_2.Data.Level)
			end
			-- Allocate 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_4, Item_2.Data.XP ~= nil and 1 or 0)
			if Item_2.Data.XP ~= nil then
				-- Allocate BLOCK: 4 bytes
				local BLOCK_START = Allocate(4)
				buffer.writeu32(SendBuffer, BLOCK_START + 0, Item_2.Data.XP)
			end
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Gamepasses ~= nil and 1 or 0)
	if Value.Gamepasses ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Gamepasses)
			-- Allocate BLOCK: 4 bytes
		local ARRAY_START_2 = Allocate(4 * #Value.Gamepasses)
		for Index = 1, #Value.Gamepasses do
			local Item_2 = Value.Gamepasses[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2)
		end
		-- END ARRAY
	end
end

local function ReadFUNCTION_DATA_FetchPlayerData(): (nil)
	return nil
end

local function WriteFUNCTION_RETURN_FetchPlayerData(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Coins ~= nil and 1 or 0)
	if Value.Coins ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writeu32(SendBuffer, BLOCK_START + 0, Value.Coins)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.Inventory ~= nil and 1 or 0)
	if Value.Inventory ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Inventory)
			-- Allocate BLOCK: 11 bytes
		local ARRAY_START_2 = Allocate(11 * #Value.Inventory)
		for Index = 1, #Value.Inventory do
			local Item_2 = Value.Inventory[Index]
			-- Allocate 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			if Item_2.Name == "Wooden Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 0)
			elseif Item_2.Name == "Plastic Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 1)
			elseif Item_2.Name == "Fish Test One" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 2)
			elseif Item_2.Name == "Fish Test Two" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 3)
			else
				error(`Unexpected enum: {Item_2.Name}, expected one of "Wooden Rod" or "Plastic Rod" or "Fish Test One" or "Fish Test Two".`)
			end
			-- Allocate 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_1, Item_2.Count)
			-- Allocate 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_2, Item_2.Data.UniqueId)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.Data.Level ~= nil and 1 or 0)
			if Item_2.Data.Level ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Item_2.Data.Level)
			end
			-- Allocate 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_4, Item_2.Data.XP ~= nil and 1 or 0)
			if Item_2.Data.XP ~= nil then
				-- Allocate BLOCK: 4 bytes
				local BLOCK_START = Allocate(4)
				buffer.writeu32(SendBuffer, BLOCK_START + 0, Item_2.Data.XP)
			end
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.Gamepasses ~= nil and 1 or 0)
	if Value.Gamepasses ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Gamepasses)
			-- Allocate BLOCK: 4 bytes
		local ARRAY_START_2 = Allocate(4 * #Value.Gamepasses)
		for Index = 1, #Value.Gamepasses do
			local Item_2 = Value.Gamepasses[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2)
		end
		-- END ARRAY
	end
end

local function WriteEVENT_EntityAction(Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	if Value.Action == "Create" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value.Action == "Destroy" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	elseif Value.Action == "Update" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 2)
	else
		error(`Unexpected enum: {Value.Action}, expected one of "Create" or "Destroy" or "Update".`)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.EntityId)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.EntityData ~= nil and 1 or 0)
	if Value.EntityData ~= nil then
	end
end

local function ReadFUNCTION_DATA_FetchEntities(): (nil)
	return nil
end

local function WriteFUNCTION_RETURN_FetchEntities(Value: {[number]: {  }}, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value do
		Elements_1 += 1
		local OFFSET_0 = Allocate(1)
		buffer.writeu8(SendBuffer, OFFSET_0, Key_1)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Elements_1)
end

local function ReadEVENT_StateRequest(): (nil)
	return nil
end

local function WriteEVENT_UpdateState(Value: { Amendment: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string } }?, Bill: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string } }?, Members: {[string]: { { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string } }}?, UGT: {[string]: { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }}?, SimBill: {[string]: { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }}? }): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value.Amendment ~= nil and 1 or 0)
	if Value.Amendment ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Amendment)
			-- Allocate BLOCK: 12 bytes
		local ARRAY_START_2 = Allocate(12 * #Value.Amendment)
		for Index = 1, #Value.Amendment do
			local Item_2 = Value.Amendment[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2.congress)
			-- Allocate 1
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_1, Item_2.latestAction ~= nil and 1 or 0)
			if Item_2.latestAction ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu8(SendBuffer, BLOCK_START + 0, Item_2.latestAction.action ~= nil and 1 or 0)
				if Item_2.latestAction.action ~= nil then
					-- Allocate BLOCK: 2 bytes
					local BLOCK_START = Allocate(2)
					local Length = #Item_2.latestAction.action
					buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_2.latestAction.action, Length)
				end
				buffer.writeu8(SendBuffer, BLOCK_START + 1, Item_2.latestAction.text ~= nil and 1 or 0)
				if Item_2.latestAction.text ~= nil then
					-- Allocate BLOCK: 2 bytes
					local BLOCK_START = Allocate(2)
					local Length = #Item_2.latestAction.text
					buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_2.latestAction.text, Length)
				end
			end
			local Length = #Item_2.number
			-- Allocate 2
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_2, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.number, Length)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.purpose ~= nil and 1 or 0)
			if Item_2.purpose ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				local Length = #Item_2.purpose
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_2.purpose, Length)
			end
			local Length = #Item_2.type
			-- Allocate 2
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_4, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.type, Length)
			local Length = #Item_2.updateDate
			-- Allocate 2
			local OPERATION_OFFSET_5 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_5, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.updateDate, Length)
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.Bill ~= nil and 1 or 0)
	if Value.Bill ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Bill)
			-- Allocate BLOCK: 14 bytes
		local ARRAY_START_2 = Allocate(14 * #Value.Bill)
		for Index = 1, #Value.Bill do
			local Item_2 = Value.Bill[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2.congress)
			-- Allocate 1
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_1, Item_2.latestAction ~= nil and 1 or 0)
			if Item_2.latestAction ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu8(SendBuffer, BLOCK_START + 0, Item_2.latestAction.action ~= nil and 1 or 0)
				if Item_2.latestAction.action ~= nil then
					-- Allocate BLOCK: 2 bytes
					local BLOCK_START = Allocate(2)
					local Length = #Item_2.latestAction.action
					buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_2.latestAction.action, Length)
				end
				buffer.writeu8(SendBuffer, BLOCK_START + 1, Item_2.latestAction.text ~= nil and 1 or 0)
				if Item_2.latestAction.text ~= nil then
					-- Allocate BLOCK: 2 bytes
					local BLOCK_START = Allocate(2)
					local Length = #Item_2.latestAction.text
					buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_2.latestAction.text, Length)
				end
			end
			local Length = #Item_2.number
			-- Allocate 2
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_2, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.number, Length)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.originalChamber ~= nil and 1 or 0)
			if Item_2.originalChamber ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				local Length = #Item_2.originalChamber
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_2.originalChamber, Length)
			end
			local Length = #Item_2.title
			-- Allocate 2
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_4, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.title, Length)
			local Length = #Item_2.type
			-- Allocate 2
			local OPERATION_OFFSET_5 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_5, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.type, Length)
			local Length = #Item_2.updateDate
			-- Allocate 2
			local OPERATION_OFFSET_6 = ARRAY_START_2
			ARRAY_START_2 += 2
			buffer.writeu16(SendBuffer, OPERATION_OFFSET_6, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Item_2.updateDate, Length)
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Members ~= nil and 1 or 0)
	if Value.Members ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.Members do
			Elements_2 += 1
			local Length = #Key_2
			local OFFSET_0 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_0, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Key_2, Length)
			-- START ARRAY
			local OFFSET_1 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_1, #Element_2)
				-- Allocate BLOCK: 12 bytes
			local ARRAY_START_3 = Allocate(12 * #Element_2)
			for Index = 1, #Element_2 do
				local Item_3 = Element_2[Index]
				local Length = #Item_3.bioguideId
				-- Allocate 2
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_0, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3.bioguideId, Length)
				local Length = #Item_3.name
				-- Allocate 2
				local OPERATION_OFFSET_1 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_1, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3.name, Length)
				local Length = #Item_3.partyName
				-- Allocate 2
				local OPERATION_OFFSET_2 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_2, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3.partyName, Length)
				local Length = #Item_3.state
				-- Allocate 2
				local OPERATION_OFFSET_3 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_3, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3.state, Length)
				-- START ARRAY
				-- Allocate 2
				local OPERATION_OFFSET_4 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_4, #Item_3.terms.item)
					-- Allocate BLOCK: 4 bytes
				local ARRAY_START_4 = Allocate(4 * #Item_3.terms.item)
				for Index = 1, #Item_3.terms.item do
					local Item_4 = Item_3.terms.item[Index]
					local Length = #Item_4.chamber
					-- Allocate 2
					local OPERATION_OFFSET_0 = ARRAY_START_4
					ARRAY_START_4 += 2
					buffer.writeu16(SendBuffer, OPERATION_OFFSET_0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_4.chamber, Length)
					-- Allocate 2
					local OPERATION_OFFSET_1 = ARRAY_START_4
					ARRAY_START_4 += 2
					buffer.writeu16(SendBuffer, OPERATION_OFFSET_1, Item_4.startYear)
				end
				-- END ARRAY
				local Length = #Item_3.updateDate
				-- Allocate 2
				local OPERATION_OFFSET_5 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_5, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3.updateDate, Length)
			end
			-- END ARRAY
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 0, Elements_2)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.UGT ~= nil and 1 or 0)
	if Value.UGT ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.UGT do
			Elements_2 += 1
			local Length = #Key_2
			local OFFSET_0 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_0, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Key_2, Length)
			local OFFSET_1 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_1, Element_2.Authenticated and 1 or 0)
			local Length = #Element_2.Data
			local OFFSET_2 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_2, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Element_2.Data, Length)
			local OFFSET_3 = Allocate(2)
			if Element_2.Lean > 65504 then
				buffer.writeu16(SendBuffer, OFFSET_3, 0b0_11111_0000000000)
			elseif Element_2.Lean < -65504 then
				buffer.writeu16(SendBuffer, OFFSET_3, 0b1_11111_0000000000)
			elseif Element_2.Lean ~= Element_2.Lean then
				buffer.writeu16(SendBuffer, OFFSET_3, 0b1_11111_0000000001)
			elseif Element_2.Lean == 0 then
				buffer.writeu16(SendBuffer, OFFSET_3, 0)
			else
				local float = Element_2.Lean
				local Abosulte = math.abs(float)
				local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
				local RoundedValue = (Abosulte // Interval) * Interval
				local Fraction, Exponent = math.frexp(RoundedValue)
				Exponent += 14
				local Mantissa = math.round(if Exponent <= 0
					then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
					else Fraction * 0x800) % 0x400
				local Result = Mantissa
					+ math.max(Exponent, 0) * 0x400
					+ if float < 0 then 0x8000 else 0
				buffer.writeu16(SendBuffer, OFFSET_3, Result)
			end
			local OFFSET_4 = Allocate(4)
			buffer.writeu32(SendBuffer, OFFSET_4, Element_2.PublishDate)
			local OFFSET_5 = Allocate(4)
			buffer.writeu32(SendBuffer, OFFSET_5, Element_2.Publisher)
			local Length = #Element_2.Title
			local OFFSET_6 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_6, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Element_2.Title, Length)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 0, Elements_2)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.SimBill ~= nil and 1 or 0)
	if Value.SimBill ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.SimBill do
			Elements_2 += 1
			local Length = #Key_2
			local OFFSET_0 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_0, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Key_2, Length)
			local OFFSET_1 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_1, Element_2.Authenticated and 1 or 0)
			local Length = #Element_2.Bill.Content
			local OFFSET_2 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_2, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Element_2.Bill.Content, Length)
			local Length = #Element_2.Bill.Name
			local OFFSET_3 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_3, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Element_2.Bill.Name, Length)
			local OFFSET_4 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_4, Element_2.Bill.Prewrittens ~= nil and 1 or 0)
			if Element_2.Bill.Prewrittens ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				-- START ARRAY
				buffer.writeu16(SendBuffer, BLOCK_START + 0, #Element_2.Bill.Prewrittens)
					-- Allocate BLOCK: 2 bytes
				local ARRAY_START_4 = Allocate(2 * #Element_2.Bill.Prewrittens)
				for Index = 1, #Element_2.Bill.Prewrittens do
					local Item_4 = Element_2.Bill.Prewrittens[Index]
					local Length = #Item_4
					-- Allocate 2
					local OPERATION_OFFSET_0 = ARRAY_START_4
					ARRAY_START_4 += 2
					buffer.writeu16(SendBuffer, OPERATION_OFFSET_0, Length)
					Allocate(Length)
					buffer.writestring(SendBuffer, SendOffset, Item_4, Length)
				end
				-- END ARRAY
			end
			-- START ARRAY
			local OFFSET_5 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_5, #Element_2.Bill.Topics)
				-- Allocate BLOCK: 2 bytes
			local ARRAY_START_3 = Allocate(2 * #Element_2.Bill.Topics)
			for Index = 1, #Element_2.Bill.Topics do
				local Item_3 = Element_2.Bill.Topics[Index]
				local Length = #Item_3
				-- Allocate 2
				local OPERATION_OFFSET_0 = ARRAY_START_3
				ARRAY_START_3 += 2
				buffer.writeu16(SendBuffer, OPERATION_OFFSET_0, Length)
				Allocate(Length)
				buffer.writestring(SendBuffer, SendOffset, Item_3, Length)
			end
			-- END ARRAY
			local OFFSET_6 = Allocate(4)
			buffer.writeu32(SendBuffer, OFFSET_6, Element_2.PublishDate)
			local OFFSET_7 = Allocate(4)
			buffer.writeu32(SendBuffer, OFFSET_7, Element_2.Publisher)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 0, Elements_2)
	end
end

local function ReadFUNCTION_DATA_CreateUGT(): ({ Title: string, Body: string, Lean: number })
	-- Read BLOCK: 6 bytes
	local BLOCK_START = Read(6)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.Title = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.Body = buffer.readstring(RecieveBuffer, Read(Length), Length)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 4)
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value.Lean = -math.huge
		else
			Value.Lean = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value.Lean = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value.Lean = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value.Lean = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value
end

local function WriteFUNCTION_RETURN_CreateUGT(Value: { Result: string, Success: boolean }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 6)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Length = #Value.Result
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Result, Length)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.Success and 1 or 0)
end

local function ReadFUNCTION_DATA_Vote(): ({ UGT: boolean, Id: string, Vote: boolean })
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value = {} :: any
	Value.UGT = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 1)
	Value.Id = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Vote = (buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1)
	return Value
end

local function WriteFUNCTION_RETURN_Vote(Value: { Result: string, Success: boolean }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 7)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Length = #Value.Result
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Result, Length)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.Success and 1 or 0)
end

local function ReadFUNCTION_DATA_RunSim(): ({ Global: boolean, CongressLean: number?, SimulatingBill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } } })
	-- Read BLOCK: 9 bytes
	local BLOCK_START = Read(9)
	local Value = {} :: any
	Value.Global = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Value.CongressLean = -math.huge
			else
				Value.CongressLean = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Value.CongressLean = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Value.CongressLean = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Value.CongressLean = if Encoded // 0x8000 == 1 then -Result else Result
		end
	end
	Value.SimulatingBill = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.SimulatingBill.Content = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 4)
	Value.SimulatingBill.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		-- START ARRAY
		Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
		Value.SimulatingBill.Prewrittens = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value.SimulatingBill.Prewrittens, Item_2)
		end
		-- END ARRAY
	end
	-- START ARRAY
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 7)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	Value.SimulatingBill.Topics = table.create(Length)
		-- Read BLOCK: 2 bytes
	local ARRAY_START_1 = Read(2 * Length)
	for Index = 1, Length do
		-- Read 2
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
		local Item_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		table.insert(Value.SimulatingBill.Topics, Item_1)
	end
	-- END ARRAY
	return Value
end

local function WriteFUNCTION_RETURN_RunSim(Value: { LawPassed: boolean?, EndOfLaw: ("House Failed" | "Senate Failed" | "Passed")?, HOR: { Passed: boolean, Votes: {[string]: boolean} }?, Senate: { Passed: boolean, Votes: {[string]: boolean} }?, Success: boolean, Result: string }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 10 bytes
	local BLOCK_START = Allocate(10)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 8)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.LawPassed ~= nil and 1 or 0)
	if Value.LawPassed ~= nil then
		-- Allocate BLOCK: 1 bytes
		local BLOCK_START = Allocate(1)
		buffer.writeu8(SendBuffer, BLOCK_START + 0, Value.LawPassed and 1 or 0)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.EndOfLaw ~= nil and 1 or 0)
	if Value.EndOfLaw ~= nil then
		-- Allocate BLOCK: 1 bytes
		local BLOCK_START = Allocate(1)
		if Value.EndOfLaw == "House Failed" then
			buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
		elseif Value.EndOfLaw == "Senate Failed" then
			buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
		elseif Value.EndOfLaw == "Passed" then
			buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
		else
			error(`Unexpected enum: {Value.EndOfLaw}, expected one of "House Failed" or "Senate Failed" or "Passed".`)
		end
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.HOR ~= nil and 1 or 0)
	if Value.HOR ~= nil then
		-- Allocate BLOCK: 3 bytes
		local BLOCK_START = Allocate(3)
		buffer.writeu8(SendBuffer, BLOCK_START + 0, Value.HOR.Passed and 1 or 0)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.HOR.Votes do
			Elements_2 += 1
			local Length = #Key_2
			local OFFSET_0 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_0, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Key_2, Length)
			local OFFSET_1 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_1, Element_2 and 1 or 0)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_2)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 6, Value.Senate ~= nil and 1 or 0)
	if Value.Senate ~= nil then
		-- Allocate BLOCK: 3 bytes
		local BLOCK_START = Allocate(3)
		buffer.writeu8(SendBuffer, BLOCK_START + 0, Value.Senate.Passed and 1 or 0)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.Senate.Votes do
			Elements_2 += 1
			local Length = #Key_2
			local OFFSET_0 = Allocate(2)
			buffer.writeu16(SendBuffer, OFFSET_0, Length)
			Allocate(Length)
			buffer.writestring(SendBuffer, SendOffset, Key_2, Length)
			local OFFSET_1 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_1, Element_2 and 1 or 0)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_2)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 7, Value.Success and 1 or 0)
	local Length = #Value.Result
	buffer.writeu16(SendBuffer, BLOCK_START + 8, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.Result, Length)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	PlayerDataReplication = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	FetchPlayerData = {
		On = NOOP
	},
	EntityAction = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	FetchEntities = {
		On = NOOP
	},
	StateRequest = {
		On = NOOP
	},
	UpdateState = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	CreateUGT = {
		On = NOOP
	},
	Vote = {
		On = NOOP
	},
	RunSim = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = ReadFUNCTION_DATA_FetchPlayerData()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"FetchPlayerData\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 3 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = ReadFUNCTION_DATA_FetchEntities()
			if Events.Reliable[3] ~= nil then
				task.spawn(Events.Reliable[3], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"FetchEntities\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 4 then
			local Value: nil = ReadEVENT_StateRequest()
			if Events.Reliable[4] ~= nil then
				Events.Reliable[4](Player, Value)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"StateRequest\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Player, Value} :: {any})
			end
		elseif Index == 6 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: { Title: string, Body: string, Lean: number } = ReadFUNCTION_DATA_CreateUGT()
			if Events.Reliable[6] ~= nil then
				task.spawn(Events.Reliable[6], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"CreateUGT\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 7 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: { UGT: boolean, Id: string, Vote: boolean } = ReadFUNCTION_DATA_Vote()
			if Events.Reliable[7] ~= nil then
				task.spawn(Events.Reliable[7], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[7] > 256 then
					warn("[Blink]: Event queue of \"Vote\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[7], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 8 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: { Global: boolean, CongressLean: number?, SimulatingBill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } } } = ReadFUNCTION_DATA_RunSim()
			if Events.Reliable[8] ~= nil then
				task.spawn(Events.Reliable[8], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[8] > 256 then
					warn("[Blink]: Event queue of \"RunSim\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[8], {Player, Value, InvocationIdentifier} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	PlayerDataReplication = {
		Fire = function(Player: Player, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_PlayerDataReplication(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	FetchPlayerData = {
		On = function(Listener: (Player, nil) -> ({ Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? })): ()
			Events.Reliable[1] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? };
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 1)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"FetchPlayerData" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_FetchPlayerData(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[1] or {}
				Queue.Reliable[1] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[1](table.unpack(Arguments))
				end
			end)
		end
	},
	EntityAction = {
		Fire = function(Player: Player, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_EntityAction(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	FetchEntities = {
		On = function(Listener: (Player, nil) -> ({[number]: {  }})): ()
			Events.Reliable[3] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: {[number]: {  }};
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 3)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"FetchEntities" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_FetchEntities(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[3] or {}
				Queue.Reliable[3] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[3](table.unpack(Arguments))
				end
			end)
		end
	},
	StateRequest = {
		On = function(Listener: (Player: Player, Value: nil) -> ()): () -> ()
			Events.Reliable[4] = Listener
			for Index, Arguments in Queue.Reliable[4] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[4] = {}
			return function (): ()
				if Events.Reliable[4] == Listener then
					Events.Reliable[4] = nil
				end
			end
		end
	},
	UpdateState = {
		Fire = function(Player: Player, Value: { Amendment: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string } }?, Bill: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string } }?, Members: {[string]: { { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string } }}?, UGT: {[string]: { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }}?, SimBill: {[string]: { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }}? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_UpdateState(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Amendment: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string } }?, Bill: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string } }?, Members: {[string]: { { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string } }}?, UGT: {[string]: { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }}?, SimBill: {[string]: { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }}? }): ()
			Load()
			WriteEVENT_UpdateState(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Amendment: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string } }?, Bill: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string } }?, Members: {[string]: { { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string } }}?, UGT: {[string]: { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }}?, SimBill: {[string]: { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }}? }): ()
			Load()
			WriteEVENT_UpdateState(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Amendment: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, purpose: string?, type: string, updateDate: string } }?, Bill: { { congress: number, latestAction: { action: string?, text: string? }?, number: string, originalChamber: string?, title: string, type: string, updateDate: string } }?, Members: {[string]: { { bioguideId: string, name: string, partyName: string, state: string, terms: { item: { { chamber: string, startYear: number } } }, updateDate: string } }}?, UGT: {[string]: { Authenticated: boolean, Data: string, Lean: number, PublishDate: number, Publisher: number, Title: string }}?, SimBill: {[string]: { Authenticated: boolean, Bill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } }, PublishDate: number, Publisher: number }}? }): ()
			Load()
			WriteEVENT_UpdateState(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	CreateUGT = {
		On = function(Listener: (Player, { Title: string, Body: string, Lean: number }) -> ({ Result: string, Success: boolean })): ()
			Events.Reliable[6] = function(Player: Player, Value: { Title: string, Body: string, Lean: number }, InvocationIdentifier: number): ()
				local ReturnValue: { Result: string, Success: boolean };
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 6)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"CreateUGT" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_CreateUGT(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[6] or {}
				Queue.Reliable[6] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[6](table.unpack(Arguments))
				end
			end)
		end
	},
	Vote = {
		On = function(Listener: (Player, { UGT: boolean, Id: string, Vote: boolean }) -> ({ Result: string, Success: boolean })): ()
			Events.Reliable[7] = function(Player: Player, Value: { UGT: boolean, Id: string, Vote: boolean }, InvocationIdentifier: number): ()
				local ReturnValue: { Result: string, Success: boolean };
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 7)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"Vote" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_Vote(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[7] or {}
				Queue.Reliable[7] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[7](table.unpack(Arguments))
				end
			end)
		end
	},
	RunSim = {
		On = function(Listener: (Player, { Global: boolean, CongressLean: number?, SimulatingBill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } } }) -> ({ LawPassed: boolean?, EndOfLaw: ("House Failed" | "Senate Failed" | "Passed")?, HOR: { Passed: boolean, Votes: {[string]: boolean} }?, Senate: { Passed: boolean, Votes: {[string]: boolean} }?, Success: boolean, Result: string })): ()
			Events.Reliable[8] = function(Player: Player, Value: { Global: boolean, CongressLean: number?, SimulatingBill: { Content: string, Name: string, Prewrittens: { string }?, Topics: { string } } }, InvocationIdentifier: number): ()
				local ReturnValue: { LawPassed: boolean?, EndOfLaw: ("House Failed" | "Senate Failed" | "Passed")?, HOR: { Passed: boolean, Votes: {[string]: boolean} }?, Senate: { Passed: boolean, Votes: {[string]: boolean} }?, Success: boolean, Result: string };
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 8)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"RunSim" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_RunSim(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[8] or {}
				Queue.Reliable[8] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[8](table.unpack(Arguments))
				end
			end)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL