--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[1] = table.create(256)
Queue.Reliable[3] = table.create(256)
export type Items = ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two")
export type ItemData = { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } }
export type PlayerData = { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }
export type EntityData = {  }
local function WriteEVENT_PlayerDataReplication(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value.Coins ~= nil and 1 or 0)
	if Value.Coins ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writeu32(SendBuffer, BLOCK_START + 0, Value.Coins)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.Inventory ~= nil and 1 or 0)
	if Value.Inventory ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Inventory)
			-- Allocate BLOCK: 11 bytes
		local ARRAY_START_2 = Allocate(11 * #Value.Inventory)
		for Index = 1, #Value.Inventory do
			local Item_2 = Value.Inventory[Index]
			-- Allocate 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			if Item_2.Name == "Wooden Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 0)
			elseif Item_2.Name == "Plastic Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 1)
			elseif Item_2.Name == "Fish Test One" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 2)
			elseif Item_2.Name == "Fish Test Two" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 3)
			else
				error(`Unexpected enum: {Item_2.Name}, expected one of "Wooden Rod" or "Plastic Rod" or "Fish Test One" or "Fish Test Two".`)
			end
			-- Allocate 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_1, Item_2.Count)
			-- Allocate 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_2, Item_2.Data.UniqueId)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.Data.Level ~= nil and 1 or 0)
			if Item_2.Data.Level ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Item_2.Data.Level)
			end
			-- Allocate 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_4, Item_2.Data.XP ~= nil and 1 or 0)
			if Item_2.Data.XP ~= nil then
				-- Allocate BLOCK: 4 bytes
				local BLOCK_START = Allocate(4)
				buffer.writeu32(SendBuffer, BLOCK_START + 0, Item_2.Data.XP)
			end
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Gamepasses ~= nil and 1 or 0)
	if Value.Gamepasses ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Gamepasses)
			-- Allocate BLOCK: 4 bytes
		local ARRAY_START_2 = Allocate(4 * #Value.Gamepasses)
		for Index = 1, #Value.Gamepasses do
			local Item_2 = Value.Gamepasses[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2)
		end
		-- END ARRAY
	end
end

local function ReadFUNCTION_DATA_FetchPlayerData(): (nil)
	return nil
end

local function WriteFUNCTION_RETURN_FetchPlayerData(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Coins ~= nil and 1 or 0)
	if Value.Coins ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writeu32(SendBuffer, BLOCK_START + 0, Value.Coins)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.Inventory ~= nil and 1 or 0)
	if Value.Inventory ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Inventory)
			-- Allocate BLOCK: 11 bytes
		local ARRAY_START_2 = Allocate(11 * #Value.Inventory)
		for Index = 1, #Value.Inventory do
			local Item_2 = Value.Inventory[Index]
			-- Allocate 1
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 1
			if Item_2.Name == "Wooden Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 0)
			elseif Item_2.Name == "Plastic Rod" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 1)
			elseif Item_2.Name == "Fish Test One" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 2)
			elseif Item_2.Name == "Fish Test Two" then
				buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 3)
			else
				error(`Unexpected enum: {Item_2.Name}, expected one of "Wooden Rod" or "Plastic Rod" or "Fish Test One" or "Fish Test Two".`)
			end
			-- Allocate 4
			local OPERATION_OFFSET_1 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_1, Item_2.Count)
			-- Allocate 4
			local OPERATION_OFFSET_2 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_2, Item_2.Data.UniqueId)
			-- Allocate 1
			local OPERATION_OFFSET_3 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_3, Item_2.Data.Level ~= nil and 1 or 0)
			if Item_2.Data.Level ~= nil then
				-- Allocate BLOCK: 2 bytes
				local BLOCK_START = Allocate(2)
				buffer.writeu16(SendBuffer, BLOCK_START + 0, Item_2.Data.Level)
			end
			-- Allocate 1
			local OPERATION_OFFSET_4 = ARRAY_START_2
			ARRAY_START_2 += 1
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_4, Item_2.Data.XP ~= nil and 1 or 0)
			if Item_2.Data.XP ~= nil then
				-- Allocate BLOCK: 4 bytes
				local BLOCK_START = Allocate(4)
				buffer.writeu32(SendBuffer, BLOCK_START + 0, Item_2.Data.XP)
			end
		end
		-- END ARRAY
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.Gamepasses ~= nil and 1 or 0)
	if Value.Gamepasses ~= nil then
		-- Allocate BLOCK: 2 bytes
		local BLOCK_START = Allocate(2)
		-- START ARRAY
		buffer.writeu16(SendBuffer, BLOCK_START + 0, #Value.Gamepasses)
			-- Allocate BLOCK: 4 bytes
		local ARRAY_START_2 = Allocate(4 * #Value.Gamepasses)
		for Index = 1, #Value.Gamepasses do
			local Item_2 = Value.Gamepasses[Index]
			-- Allocate 4
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 4
			buffer.writeu32(SendBuffer, OPERATION_OFFSET_0, Item_2)
		end
		-- END ARRAY
	end
end

local function WriteEVENT_EntityAction(Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	if Value.Action == "Create" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value.Action == "Destroy" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	elseif Value.Action == "Update" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 2)
	else
		error(`Unexpected enum: {Value.Action}, expected one of "Create" or "Destroy" or "Update".`)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value.EntityId)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.EntityData ~= nil and 1 or 0)
	if Value.EntityData ~= nil then
	end
end

local function ReadFUNCTION_DATA_FetchEntities(): (nil)
	return nil
end

local function WriteFUNCTION_RETURN_FetchEntities(Value: {[number]: {  }}, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 5 bytes
	local BLOCK_START = Allocate(5)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value do
		Elements_1 += 1
		local OFFSET_0 = Allocate(1)
		buffer.writeu8(SendBuffer, OFFSET_0, Key_1)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Elements_1)
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	PlayerDataReplication = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	FetchPlayerData = {
		On = NOOP
	},
	EntityAction = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	FetchEntities = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = ReadFUNCTION_DATA_FetchPlayerData()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"FetchPlayerData\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value, InvocationIdentifier} :: {any})
			end
		elseif Index == 3 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = ReadFUNCTION_DATA_FetchEntities()
			if Events.Reliable[3] ~= nil then
				task.spawn(Events.Reliable[3], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"FetchEntities\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Player, Value, InvocationIdentifier} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	PlayerDataReplication = {
		Fire = function(Player: Player, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_PlayerDataReplication(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? }): ()
			Load()
			WriteEVENT_PlayerDataReplication(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	FetchPlayerData = {
		On = function(Listener: (Player, nil) -> ({ Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? })): ()
			Events.Reliable[1] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: { Coins: number?, Inventory: { { Name: ("Wooden Rod" | "Plastic Rod" | "Fish Test One" | "Fish Test Two"), Count: number, Data: { UniqueId: number, Level: number?, XP: number? } } }?, Gamepasses: { number }? };
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 1)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"FetchPlayerData" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_FetchPlayerData(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[1] or {}
				Queue.Reliable[1] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[1](table.unpack(Arguments))
				end
			end)
		end
	},
	EntityAction = {
		Fire = function(Player: Player, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load(PlayersMap[Player])
			WriteEVENT_EntityAction(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { Action: ("Create" | "Destroy" | "Update"), EntityId: number, EntityData: {  }? }): ()
			Load()
			WriteEVENT_EntityAction(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	FetchEntities = {
		On = function(Listener: (Player, nil) -> ({[number]: {  }})): ()
			Events.Reliable[3] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: {[number]: {  }};
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 3)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"FetchEntities" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_FetchEntities(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[3] or {}
				Queue.Reliable[3] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[3](table.unpack(Arguments))
				end
			end)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL